require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/contacts", type: :request do
  let!(:user) { create(:user) }
  # This should return the minimal set of attributes required to create a valid
  # Contact. As you add validations to Contact, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "MyString", email: "test@test.com", user_id: user.id }
  }

  let(:invalid_attributes) {
    { name: "", email: "test@test.com" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Contact.create! valid_attributes
      get contacts_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    before do
      sign_in user
    end

    it "renders a successful response" do
      get new_contact_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    before do
      sign_in user
    end

    it "renders a successful response" do
      contact = Contact.create! valid_attributes
      get edit_contact_url(contact)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    before do
      sign_in user
    end

    context "with valid parameters" do
      it "creates a new Contact" do
        expect {
          post contacts_url, params: { contact: valid_attributes }
        }.to change(Contact, :count).by(1)
      end

      it "redirects to the created Contact" do
        post contacts_url, params: { contact: valid_attributes }
        expect(response).to redirect_to(contacts_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Contact" do
        expect {
          post contacts_url, params: { contact: invalid_attributes }
        }.to change(Contact, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post contacts_url, params: { contact: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "PATCH /update" do
    before do
      sign_in user
    end

    context "with valid parameters" do
      let(:new_attributes) {
        { name: "New Name", email: "new@email.com", user_id: user.id }
      }

      it "updates the requested Contact" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: new_attributes }
        contact.reload
        expect(contact.name).to eq "New Name"
      end

      it "redirects to the contacts index page" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: new_attributes }
        expect(response).to redirect_to contacts_url
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        contact = Contact.create! valid_attributes
        patch contact_url(contact), params: { contact: invalid_attributes }
        expect(response).not_to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    before do
      sign_in user
    end

    it "destroys the requested Contact" do
      contact = Contact.create! valid_attributes
      expect {
        delete contact_url(contact)
      }.to change(Contact, :count).by(-1)
    end

    it "redirects to the Contacts list" do
      contact = Contact.create! valid_attributes
      delete contact_url(contact)
      expect(response).to redirect_to(contacts_url)
    end
  end
end
